<?phpclass CPublic{    public static function localStrToTime($str)    {        //$timezone = isset($_SESSION['timezone']) ? $_SESSION['timezone'] : $GLOBALS['_CFG']['timezone'];        /**         * $time = mktime($hour, $minute, $second, $month, $day, $year) - date('Z') + (date('Z') - $timezone * 3600)         * 先用mktime生成时间戳，再减去date('Z')转换为GMT时间，然后修正为用户自定义时间。以下是化简后结果         **/        $time = strtotime($str);//- $timezone * 3600;        return $time;    }    public static function hidtel($phone)    {        $IsWhat = preg_match('/(0[0-9]{2,3}[-]?[2-9][0-9]{6,7}[-]?[0-9]?)/i', $phone); //固定电话        if ($IsWhat == 1) {            return preg_replace('/(0[0-9]{2,3}[-]?[2-9])[0-9]{3,4}([0-9]{3}[-]?[0-9]?)/i', '$1****$2', $phone);        }        else {            return preg_replace('/(1[358]{1}[0-9])[0-9]{4}([0-9]{4})/i', '$1****$2', $phone);        }    }    public static function getCurrentTimestamp()    {        $day = getdate();        $today = local_mktime(23, 59, 59, $day['mon'], $day['mday'], $day['year']);        return $today;    }    public static function getClientIP()    {        if (getenv("HTTP_CLIENT_IP") && strcasecmp(getenv("HTTP_CLIENT_IP"), "unknown")) {            $ip = getenv("HTTP_CLIENT_IP");        }        else if (getenv("HTTP_X_FORWARDED_FOR") && strcasecmp(getenv("HTTP_X_FORWARDED_FOR"), "unknown")) {            $ip = getenv("HTTP_X_FORWARDED_FOR");        }        else if (getenv("REMOTE_ADDR") && strcasecmp(getenv("REMOTE_ADDR"), "unknown")) {            $ip = getenv("REMOTE_ADDR");        }        else if (isset($_SERVER['REMOTE_ADDR']) && $_SERVER['REMOTE_ADDR'] && strcasecmp($_SERVER['REMOTE_ADDR'], "unknown")) {            $ip = $_SERVER['REMOTE_ADDR'];        }        else {            $ip = "unknown";        }        return ($ip);    }    /**     *  生成一个用户自定义时区日期的GMT时间戳     *     * @access  public     * @param   int $hour     * @param   int $minute     * @param   int $second     * @param   int $month     * @param   int $day     * @param   int $year     *     * @return void     */    public static function local_mktime($hour = NULL, $minute = NULL, $second = NULL, $month = NULL, $day = NULL, $year = NULL)    {        $timezone = isset($_SESSION['timezone']) ? $_SESSION['timezone'] : $GLOBALS['_CFG']['timezone'];        /**         * $time = mktime($hour, $minute, $second, $month, $day, $year) - date('Z') + (date('Z') - $timezone * 3600)         * 先用mktime生成时间戳，再减去date('Z')转换为GMT时间，然后修正为用户自定义时间。以下是化简后结果         **/        $time = mktime($hour, $minute, $second, $month, $day, $year) - $timezone * 3600;        return $time;    }    public static function convertLogLevel2LogLevelName($LogLevel)    {        foreach ($GLOBALS['gSystemDefLogLevel'] as $key => $level) {            if ($level == $LogLevel) {                return $key;            }        }        return 'UNKNOWN';    }    public static function createGuid()    {        if (function_exists('com_create_guid')) {            return com_create_guid();        }        else {            mt_srand((double)microtime() * 10000);//optional for php 4.2.0 and up.            $charId = strtoupper(md5(uniqid(rand(), true)));            $hyphen = chr(45);// "-"            $uuid = chr(123)// "{"                . substr($charId, 0, 8) . $hyphen                . substr($charId, 8, 4) . $hyphen                . substr($charId, 12, 4) . $hyphen                . substr($charId, 16, 4) . $hyphen                . substr($charId, 20, 12)                . chr(125);// "}"            return $uuid;        }    }    public static function getGuid()    {        $guid = CPublic::createGuid();        return strtoupper(str_replace("}", "", str_replace("{", "", $guid)));    }    public static function getSystemConfigFile($rootPath)    {        return sprintf("%s/%s/%s", $rootPath, SystemConfDir, SystemConfFile);    }    public static function copyItem($Item, $Key, &$Target)    {        $Target[$Key] = $Item;    }    public static function copyArray(&$source, &$target)    {        $sourceIsArray = is_array($source);        $targetIsArray = is_array($target);        if ((!$sourceIsArray) || (!$targetIsArray))        {            self::writeLog(Warning, __FILE__, __FUNCTION__, __LINE__, "Source or Target not array.");            return OBJECT_NOT_ARRAY;        }        reset($source);        while (list($key, $value) = each($source)) {            $target[$key] = $value;        }        reset($source);        return OK;    }    /**     * Create a new directory, and the whole path.     *     * If  the  parent  directory  does  not exists, we will create it,     * etc.     * @todo     *     - PHP5 mkdir functoin supports recursive, it should be used     * @author baldurien at club-internet dot fr     * @param string the directory to create     * @param int $mode     * @param bool $recursive     * @return bool return true on success, false else     * @internal param the $int mode to apply on the directory     * @previousNames mkdirs     */    public static function makeAll($dir, $mode = 0777, $recursive = true)    {        if (is_null($dir) || $dir === "") {            return FALSE;        }        if (is_dir($dir) || $dir === "/") {            return TRUE;        }        if (self::makeAll(dirname($dir), $mode, $recursive)) {            return mkdir($dir, $mode);        }        return FALSE;    }    public static function copyDirectory($source, $destination)    {        $result = true;        if (!is_dir($source)) {            trigger_error('Invalid Parameter', E_USER_ERROR);        }        if (!is_dir($destination)) {            if (!mkdir($destination, 0700)) {                trigger_error('Invalid Parameter', E_USER_ERROR);            }        }        $handle = opendir($source);        while (($file = readdir($handle)) !== false) {            if ($file != '.' && $file != '..') {                $src = $source . DIRECTORY_SEPARATOR . $file;                $dtn = $destination . DIRECTORY_SEPARATOR . $file;                if (is_dir($src)) {                    self::copyDirectory($src, $dtn);                }                else {                    if (!copy($src, $dtn)) {                        $result = false;                        break;                    }                }            }        }        closedir($handle);        return $result;    }    /**     * Copies file or folder from source to destination, it can also do     * recursive copy by recursively creating the dest file or directory path if it wasn't exist     * Use cases:     * - Src:/home/test/file.txt ,Dst:/home/test/b ,Result:/home/test/b -> If source was file copy file.txt name with b as name to destination     * - Src:/home/test/file.txt ,Dst:/home/test/b/ ,Result:/home/test/b/file.txt -> If source was file Creates b directory if does not exsits and copy file.txt into it     * - Src:/home/test ,Dst:/home/ ,Result:/home/test/** -> If source was directory copy test directory and all of its content into dest     * - Src:/home/test/ ,Dst:/home/ ,Result:/home/**-> if source was direcotry copy its content to dest     * - Src:/home/test ,Dst:/home/test2 ,Result:/home/test2/** -> if source was directoy copy it and its content to dest with test2 as name     * - Src:/home/test/ ,Dst:/home/test2 ,Result:->/home/test2/** if source was directoy copy it and its content to dest with test2 as name     * @author Sina Salek (http://sina.salek.ws/node/1289)     * @todo     *  - Should have rollback so it can undo the copy when it wasn't completely successful     *  - It should be possible to turn off auto path creation feature f     *  - Supporting callback function     *  - May prevent some issues on shared enviroments : http://us3.php.net/umask     * @param $source //file or folder     * @param $dest ///file or folder     * @param $options //folderPermission,filePermission     * @return boolean     */    public static function smartCopy($source, $dest, $options = array('folderPermission' => 0755, 'filePermission' => 0755))    {        $result = false;        if (is_file($source)) {            if ($dest[strlen($dest) - 1] == '/') {                if (!file_exists($dest)) {                    self::makeAll($dest, $options['folderPermission'], true);                }                $__dest = $dest . "/" . basename($source);            }            else {                $__dest = $dest;            }            $result = copy($source, $__dest);            chmod($__dest, $options['filePermission']);        }        elseif (is_dir($source)) {            if ($dest[strlen($dest) - 1] == '/') {                if ($source[strlen($source) - 1] == '/') {                    //Copy only contents                }                else {                    //Change parent itself and its contents                    $dest = $dest . basename($source);                    @mkdir($dest);                    chmod($dest, $options['filePermission']);                }            }            else {                if ($source[strlen($source) - 1] == '/') {                    //Copy parent directory with new name and all its content                    @mkdir($dest, $options['folderPermission']);                    chmod($dest, $options['filePermission']);                }                else {                    //Copy parent directory with new name and all its content                    @mkdir($dest, $options['folderPermission']);                    chmod($dest, $options['filePermission']);                }            }            $dirHandle = opendir($source);            while ($file = readdir($dirHandle)) {                if ($file != "." && $file != "..") {                    if (!is_dir($source . "/" . $file)) {                        $__dest = $dest . "/" . $file;                    }                    else {                        $__dest = $dest . "/" . $file;                    }                    //echo "$source/$file ||| $__dest<br />";                    $result = self::smartCopy($source . "/" . $file, $__dest, $options);                }            }            closedir($dirHandle);        }        else {            $result = false;        }        return $result;    }    /**     * 判断是否是注释行     * @param $configItemLine     * @return bool     */    public static function isCommentLine($configItemLine)    {        $NoteSignPos = strpos($configItemLine, NoteSign);        if ($NoteSignPos == FALSE)        {            return FALSE;        }        if ($NoteSignPos == 0)        {            return TRUE;        }        return FALSE;    }    /**     * 解析配置项     * @param $configItemLine     * @param $separator     * @return string     */    public static function parseConfigItemName($configItemLine, $separator)    {        $SeparatorPos = strpos($configItemLine, $separator);        return substr($configItemLine, 0, $SeparatorPos);    }    public static function getHeadString($sourceStr, $separator)    {        $SeparatorPos = strpos($sourceStr, $separator);        return substr($sourceStr, 0, $SeparatorPos);    }    public static function parseConfigItemValue($ConfigItemLine, $Separator)    {        $SeparatorPos = strpos($ConfigItemLine, $Separator);        return substr($ConfigItemLine, $SeparatorPos + 1);    }    public static function initSystemDefLogLevels()    {        $GLOBALS['gSystemDefLogLevel']["Emergency"] = Emergency;        $GLOBALS['gSystemDefLogLevel']["Alert"] = Alert;        $GLOBALS['gSystemDefLogLevel']["Critical"] = Critical;        $GLOBALS['gSystemDefLogLevel']["Error"] = Error;        $GLOBALS['gSystemDefLogLevel']["Warning"] = Warning;        $GLOBALS['gSystemDefLogLevel']["Notic"] = Notic;        $GLOBALS['gSystemDefLogLevel']["Info"] = Info;        $GLOBALS['gSystemDefLogLevel']["Debug"] = Debug;    }    public static function getYear($dateTimeObj)    {        return $dateTimeObj->format("Y");    }    public static function getMonth($dateTimeObj)    {        return $dateTimeObj->format("m");    }    public static function getDay($dateTimeObj)    {        return $dateTimeObj->format("d");    }    public static function getRandCode($charArray, $codeLength)    {        $charArrayLength = count($charArray);        $randCode = "";        for($index = 0; $index < $codeLength; ++$index)        {            $codeIndex = mt_rand(0, ($charArrayLength - 1));            $randCode = sprintf("%s%s",$randCode, $charArray[$codeIndex]);        }        return $randCode;    }}?>